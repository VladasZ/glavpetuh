use teloxide::prelude::*;
use teloxide::types::Message;
use rand::prelude::SliceRandom;
use teloxide::utils::command::BotCommands;

#[derive(BotCommands, Clone)]
#[command(rename_rule = "lowercase", description = "These commands are supported:")]
enum Command {
    #[command(description = "display this text.")]
    Help,
    #[command(description = "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.")]
    K,
    #[command(description = "–£–≤–∞–∂–µ–Ω–∏–µ –ú–∞–∫—Å–∏–º—É.")]
    M,
    #[command(description = "–£–≤–∞–∂–µ–Ω–∏–µ –†–æ–º–µ.")]
    R,
    #[command(description = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ.")]
    Gm,
    #[command(description = "–£–∑–Ω–∞—Ç—å –∫—Ç–æ –ø–µ—Ç—É—Ö.")]
    Kto,
    #[command(description = "–ë—Ä–æ—Å–∏—Ç—å –ø–µ—Ç—É—à–∏–Ω—ã–π –∫—É–±–∏–∫.")]
    Kub,
}

async fn handle_command(bot: Bot, msg: Message, cmd: Command) -> ResponseResult<()> {

    dbg!(&msg);

    match cmd {
        Command::Help => {
            bot.send_message(msg.chat.id, Command::descriptions().to_string()).await?;
        }
        Command::K => {
            bot.send_message(msg.chat.id, "–ö—É–∫–∞—Ä–µ–∫—É—É—É—É —è –ø–µ—Ç—É—à–∞—Ä–∞!!!").await?;
        }
        Command::M => {
            bot.send_message(msg.chat.id, "–ú–∞–∫—Å–∏–º –ü—è—Ç—É—à–∞—Ä–∞!!!! üêìüêìüêìüêìüêì").await?;
        }
        Command::R => {
            bot.send_message(msg.chat.id, "–†–æ–º–∞ –∫–∞–±–ª—É–∫ –ø–µ—Ç—É—à–∏–Ω—ã–π üë†").await?;
        }
        Command::Gm => {
            bot.send_message(msg.chat.id, "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ –ø–µ—Ç—É—à–∞—Ä—ã –µ–±–∞–Ω—ã–µ!").await?;
        }
        Command::Kto => {
            let names = ["–ú–∞–∫—Å–∏–º", "–í–ª–∞–¥–∏–∫", "–í–ª–∞–¥–∞—Å", "–†–æ–º–∞", "–ù–∞—Å—Ç—è", "–î–µ–Ω–∏—Å"];
            let name = names.choose(&mut rand::thread_rng()).unwrap();
            let reply = format!("{name} ‚Äî –ø–µ—Ç—É—Ö! üêì");
            bot.send_message(msg.chat.id, reply).await?;
        }
        Command::Kub => {
            bot.send_dice(msg.chat.id).await?;
        }
    }
    Ok(())
}


async fn handle_text(bot: Bot, msg: Message) -> ResponseResult<()> {

    dbg!(&msg);

    if let Some(text) = msg.text() {
        if text == "–ö—Ç–æ –ø–µ—Ç—É—Ö?" {
            let names = ["–ú–∞–∫—Å–∏–º", "–í–ª–∞–¥–∏–∫", "–í–ª–∞–¥–∞—Å", "–†–æ–º–∞", "–ù–∞—Å—Ç—è", "–î–µ–Ω–∏—Å"];
            let name = names.choose(&mut rand::thread_rng()).unwrap();
            let reply = format!("{name} ‚Äî –ø–µ—Ç—É—Ö! üêì");
            bot.send_message(msg.chat.id, reply).await?;
        }
    }
    Ok(())
}

#[tokio::main]
async fn main() {
    pretty_env_logger::init();

    // Load the bot token from environment variable
    dotenv::dotenv().ok();
    log::info!("Starting Telegram bot...");

    let bot = Bot::from_env();

    // Build dispatcher with both command and message handlers
    let handler = dptree::entry()
        .branch(Update::filter_message()
            .filter_command::<Command>()
            .endpoint(handle_command))
        .branch(Update::filter_message()
            .endpoint(handle_text));

    Dispatcher::builder(bot, handler)
        .enable_ctrlc_handler()
        .build()
        .dispatch()
        .await;
}
