mod chat_gpt;

use crate::chat_gpt::{query_denis, query_petuh, query_zul};
use anyhow::Result;
use fake::Fake;
use rand::prelude::SliceRandom;
use reqwest::Client;
use serde::Deserialize;
use teloxide::prelude::*;
use teloxide::types::ParseMode;
use teloxide::types::{MediaKind, Message, MessageKind};
use teloxide::utils::command::BotCommands;

#[derive(BotCommands, Clone)]
#[command(rename_rule = "lowercase", description = "üêì –ü–µ—Ç—É—à–∏–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")]
enum Command {
    #[command(description = "–ü–æ–º–æ—â—å –ø–µ—Ç—É—à–∞—Ä—ã.")]
    Help,
    #[command(description = "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.")]
    K,
    #[command(description = "–£–≤–∞–∂–µ–Ω–∏–µ –ú–∞–∫—Å–∏–º—É.")]
    M,
    #[command(description = "–£–≤–∞–∂–µ–Ω–∏–µ –†–æ–º–µ.")]
    R,
    #[command(description = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ.")]
    Gm,
    #[command(description = "–£–∑–Ω–∞—Ç—å –∫—Ç–æ –ø–µ—Ç—É—Ö.")]
    Kto,
    #[command(description = "–ë—Ä–æ—Å–∏—Ç—å –ø–µ—Ç—É—à–∏–Ω—ã–π –∫—É–±–∏–∫.")]
    Kub,
    Vladik,
}

const O4KO_STRENGTH: u32 = 20;

async fn handle_command(bot: Bot, msg: Message, cmd: Command) -> ResponseResult<()> {
    dbg!(&msg);

    match cmd {
        Command::Help => {
            bot.send_message(msg.chat.id, Command::descriptions().to_string())
                .await?;
        }
        Command::K => {
            bot.send_message(
                msg.chat.id,
                "–ö—É–∫–∞—Ä–µ–∫—É—É—É—É —è –ø–µ—Ç—É—à–∞—Ä–∞!!! –Ø –∫—É–∫–æ—Ä–µ–∫–æ—é —è–∫ –ø—è—Ç—É—Ö üêì. –ö–æ–∫",
            )
            .await?;
        }
        Command::M => {
            bot.send_message(msg.chat.id, "–ú–∞–∫—Å–∏–º –ü—è—Ç—É—à–∞—Ä–∞!!!! üêìüêìüêìüêìüêì")
                .await?;
        }
        Command::R => {
            bot.send_message(msg.chat.id, "–†–æ–º–∞ –∫–∞–±–ª—É–∫ –ø–µ—Ç—É—à–∏–Ω—ã–π üë†")
                .await?;
        }
        Command::Gm => {
            bot.send_message(msg.chat.id, "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ –ø–µ—Ç—É—à–∞—Ä—ã –µ–±–∞–Ω—ã–µ! üêì")
                .await?;
        }
        Command::Kto => {
            let names = [
                "–ú–∞–∫—Å–∏–º",
                "–í–ª–∞–¥–∏–∫",
                "–í–ª–∞–¥–∞—Å",
                "–†–æ–º–∞",
                "–ù–∞—Å—Ç—è",
                "–î–µ–Ω–∏—Å",
                "–í–∏—Ç—è",
            ];
            let name = names.choose(&mut rand::thread_rng()).unwrap();
            let reply = format!("{name} ‚Äî –ø–µ—Ç—É—Ö! üêì");
            bot.send_message(msg.chat.id, reply).await?;
        }
        Command::Kub => {
            bot.send_dice(msg.chat.id).await?;
        }
        Command::Vladik => {
            let user_id = 795896962; // Replace with actual user ID
            let message = format!(
                "–≠—Ç–æ –≤–µ–ª–∏–∫–∏–π –ø—è—Ç—É—à–∞—Ä–∞ - <a href=\"tg://user?id={}\">–ü—è—Ç—É—Ö!!!</a>!",
                user_id
            );

            bot.send_message(msg.chat.id, message)
                .parse_mode(ParseMode::Html)
                .await?;
        }
    }
    Ok(())
}

async fn handle_text(bot: Bot, msg: Message) -> ResponseResult<()> {
    dbg!(&msg);

    match msg.kind {
        MessageKind::Common(ref common_message) => match &common_message.media_kind {
            MediaKind::Sticker(sticker) => {
                if sticker.sticker.file.unique_id == "AgADl14AAqISEEs" {
                    bot.send_message(msg.chat.id, "@maxon8871 !! –ù—É —Ç—ã –∏ –ø–µ—Ç—É—Ö!!!")
                        .await?;
                }
            }
            _ => (),
        },
        _ => (),
    }

    if let Some(text) = msg.text() {
        let text = text.to_lowercase();

        if text.starts_with("–¥–µ–Ω–∏—Å, ") {
            let text = &text["–¥–µ–Ω–∏—Å, ".len()..];

            bot.send_message(
                msg.chat.id,
                format!("–î–µ–Ω–∏—Å:\n{}", query_denis(&text).await.unwrap()),
            )
            .await?;

            if (0..O4KO_STRENGTH).fake::<u32>() == 5 {
                bot.send_message(msg.chat.id, query_denis(&"–Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –±—É–¥—Ç–æ —É —Ç–µ–±—è —Å–≥–æ—Ä–µ–ª–∞ –∂–æ–ø–∞ –∏ —Ç—ã —É—Ö–æ–¥–∏—à—å –∏–∑ —á–∞—Ç–∞ –∏ –ø–ª–µ–≤–∞–ª –Ω–∞ –≤—Å–µ—Ö –µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤").await.unwrap()).await?;
                bot.leave_chat(msg.chat.id).await?;
            }

            return Ok(());
        }

        if text.starts_with("–ø—è—Ç—É—Ö, ") {
            let text = &text["–ø—è—Ç—É—Ö, ".len()..];

            bot.send_message(
                msg.chat.id,
                format!("–ü—è—Ç—É—Ö:\n{}", query_petuh(&text).await.unwrap()),
            )
            .await?;

            return Ok(());
        }

        if text.starts_with("–∑—É–ª, ") {
            let text = &text["–∑—É–ª, ".len()..];

            bot.send_message(
                msg.chat.id,
                format!("–ó—É–ª:\n{}", query_zul(&text).await.unwrap()),
            )
            .await?;

            if (0..O4KO_STRENGTH).fake::<u32>() == 5 {
                bot.send_message(msg.chat.id, query_zul(&"–Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –±—É–¥—Ç–æ —É —Ç–µ–±—è —Å–≥–æ—Ä–µ–ª–∞ –∂–æ–ø–∞ –∏ —Ç—ã —É—Ö–æ–¥–∏—à—å –∏–∑ —á–∞—Ç–∞ –∏ –ø–ª–µ–≤–∞–ª –Ω–∞ –≤—Å–µ—Ö –µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤").await.unwrap()).await?;
                bot.leave_chat(msg.chat.id).await?;
            }

            return Ok(());
        }

        if text.contains("--version") || text.contains("-v") {
            bot.send_message(msg.chat.id, "–ü—è—Ç—É—à–∞—Ä–∞ 0.4.3").await?;
        }

        if text.contains("–ø–æ–≥–æ–¥–∞") {
            let weather = get_weather(&text).await.unwrap();
            bot.send_message(msg.chat.id, weather).await?;
        }

        if text == "–ö—Ç–æ –ø–µ—Ç—É—Ö?" {
            let names = [
                "–ú–∞–∫—Å–∏–º",
                "–í–ª–∞–¥–∏–∫",
                "–í–ª–∞–¥–∞—Å",
                "–†–æ–º–∞",
                "–ù–∞—Å—Ç—è",
                "–î–µ–Ω–∏—Å",
                "–í–∏—Ç—è",
            ];
            let name = names.choose(&mut rand::thread_rng()).unwrap();
            let reply = format!("{name} ‚Äî –ø–µ—Ç—É—Ö! üêì");
            bot.send_message(msg.chat.id, reply).await?;
        }
    }
    Ok(())
}

#[tokio::main]
async fn main() -> Result<()> {
    pretty_env_logger::init();

    dotenv::dotenv().ok();
    log::info!("Starting Telegram bot...");

    let bot = Bot::from_env();

    let handler = dptree::entry()
        .branch(
            Update::filter_message()
                .filter_command::<Command>()
                .endpoint(handle_command),
        )
        .branch(Update::filter_message().endpoint(handle_text));

    Dispatcher::builder(bot, handler)
        .enable_ctrlc_handler()
        .build()
        .dispatch()
        .await;

    Ok(())
}

#[derive(Debug, Deserialize)]
struct WeatherResponse {
    weather: Vec<Weather>,
    main: Main,
    name: String,
}

#[derive(Debug, Deserialize)]
struct Weather {
    description: String,
}

#[derive(Debug, Deserialize)]
struct Main {
    temp: f64,
}

async fn get_weather(query: &str) -> Result<String> {
    let city = query.replace('?', "");
    let city = city.split(' ').last().unwrap();

    dbg!(&city);

    dotenv::dotenv()?;
    // let city = text
    //     .split_whitespace()
    //     .nth(1)
    //     .unwrap_or("–ú–æ—Å–∫–≤–∞"); // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å "/–ø–æ–≥–æ–¥–∞ –°–ü–ë"

    let client = Client::new();

    let api_key = std::env::var("OPENWEATHER_API_KEY")?;

    let url = format!(
        "https://api.openweathermap.org/data/2.5/weather?q={}&units=metric&lang=ru&appid={}",
        city, api_key
    );

    let response = client.get(&url).send().await?;

    dbg!(&response);

    if response.status().is_success() {
        let data = dbg!(response.json::<WeatherResponse>().await)?;

        let reply = format!(
            "–í –≥–æ—Ä–æ–¥–µ {} –ø–µ—Ç—É—à–∏–Ω–∞—è –ø–æ–≥–æ–¥–∞: {}, {:.1}¬∞C",
            data.name,
            data.weather
                .first()
                .map_or("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞", |w| w.description.as_str()),
            data.main.temp
        );

        Ok(reply)
    } else {
        Ok("–Ø —Ç—É–ø–æ–π –ø—è—Ç—É—Ö, –Ω–∏—Ö—É—è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏".to_string())
    }
}

#[tokio::test]
async fn test_weather() -> Result<()> {
    let text = "–≠–π –ø—è—Ç—É—à–∞—Ä–∞, –∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ –ú–∏–Ω—Å–∫?";

    dbg!(get_weather(text).await?);

    Ok(())
}
